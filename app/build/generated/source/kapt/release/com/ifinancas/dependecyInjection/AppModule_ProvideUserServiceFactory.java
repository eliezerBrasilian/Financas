// Generated by Dagger (https://dagger.dev).
package com.ifinancas.dependecyInjection;

import android.content.Context;
import com.google.firebase.firestore.FirebaseFirestore;
import com.ifinancas.services.UserService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppModule_ProvideUserServiceFactory implements Factory<UserService> {
  private final Provider<Context> contextProvider;

  private final Provider<FirebaseFirestore> firestoreProvider;

  public AppModule_ProvideUserServiceFactory(Provider<Context> contextProvider,
      Provider<FirebaseFirestore> firestoreProvider) {
    this.contextProvider = contextProvider;
    this.firestoreProvider = firestoreProvider;
  }

  @Override
  public UserService get() {
    return provideUserService(contextProvider.get(), firestoreProvider.get());
  }

  public static AppModule_ProvideUserServiceFactory create(Provider<Context> contextProvider,
      Provider<FirebaseFirestore> firestoreProvider) {
    return new AppModule_ProvideUserServiceFactory(contextProvider, firestoreProvider);
  }

  public static UserService provideUserService(Context context, FirebaseFirestore firestore) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideUserService(context, firestore));
  }
}
